'''The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?'''

def get_nth_triangle_number(n):
    return n * (n + 1) / 2

def generate_triangle_numbers(limit):
    i = 1
    tri_num = []

    while i < limit:
        j = 1
        sum = 0
        while j <= i:
            sum += j
            j = j + 1

        tri_num.append(sum)

        i = i + 1


    return tri_num

def get_factors(number):
    i = 1
    divisors = []
    while i < number:
        if number % i == 0:
            divisors.append(i)
        i = i + 1
    return divisors

divisors = []
tri_num = 1
i = 1
j = 1

while True:
    if len(divisors) <= 500:
        divisors = []
        j = 1
    else:
        break

    tri_num = get_nth_triangle_number(i)
    print 'The %d triangle number is: %d' %  (i, tri_num)
    while j < tri_num:
        if tri_num % j == 0:
            divisors.append(j)
        j = j + 1
    print 'It has %d divisors.' % (len(divisors))
    i = i + 1

print tri_num
